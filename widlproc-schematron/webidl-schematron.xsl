<?xml version="1.0" standalone="yes"?>
<axsl:stylesheet xmlns:axsl="http://www.w3.org/1999/XSL/Transform" xmlns:sch="http://www.ascc.net/xml/schematron" xmlns:iso="http://purl.oclc.org/dsdl/schematron" version="1.0"><!--Implementers: please note that overriding process-prolog or process-root is 
    the preferred method for meta-stylesheets to use where possible. -->
<axsl:param name="archiveDirParameter"/><axsl:param name="archiveNameParameter"/><axsl:param name="fileNameParameter"/><axsl:param name="fileDirParameter"/>

<!--PHASES-->


<!--PROLOG-->
<axsl:output xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" xmlns:svrl="http://purl.oclc.org/dsdl/svrl" method="xml" omit-xml-declaration="no" standalone="yes" indent="yes"/>

<!--KEYS-->


<!--DEFAULT RULES-->


<!--MODE: SCHEMATRON-SELECT-FULL-PATH-->
<!--This mode can be used to generate an ugly though full XPath for locators-->
<axsl:template match="*" mode="schematron-select-full-path"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:template>

<!--MODE: SCHEMATRON-FULL-PATH-->
<!--This mode can be used to generate an ugly though full XPath for locators-->
<axsl:template match="*" mode="schematron-get-full-path"><axsl:apply-templates select="parent::*" mode="schematron-get-full-path"/><axsl:text>/</axsl:text><axsl:choose><axsl:when test="namespace-uri()=''"><axsl:value-of select="name()"/><axsl:variable name="p_1" select="1+    count(preceding-sibling::*[name()=name(current())])"/><axsl:if test="$p_1&gt;1 or following-sibling::*[name()=name(current())]">[<axsl:value-of select="$p_1"/>]</axsl:if></axsl:when><axsl:otherwise><axsl:text>*[local-name()='</axsl:text><axsl:value-of select="local-name()"/><axsl:text>' and namespace-uri()='</axsl:text><axsl:value-of select="namespace-uri()"/><axsl:text>']</axsl:text><axsl:variable name="p_2" select="1+   count(preceding-sibling::*[local-name()=local-name(current())])"/><axsl:if test="$p_2&gt;1 or following-sibling::*[local-name()=local-name(current())]">[<axsl:value-of select="$p_2"/>]</axsl:if></axsl:otherwise></axsl:choose></axsl:template><axsl:template match="@*" mode="schematron-get-full-path"><axsl:text>/</axsl:text><axsl:choose><axsl:when test="namespace-uri()=''">@<axsl:value-of select="name()"/></axsl:when><axsl:otherwise><axsl:text>@*[local-name()='</axsl:text><axsl:value-of select="local-name()"/><axsl:text>' and namespace-uri()='</axsl:text><axsl:value-of select="namespace-uri()"/><axsl:text>']</axsl:text></axsl:otherwise></axsl:choose></axsl:template>

<!--MODE: SCHEMATRON-FULL-PATH-2-->
<!--This mode can be used to generate prefixed XPath for humans-->
<axsl:template match="node() | @*" mode="schematron-get-full-path-2"><axsl:for-each select="ancestor-or-self::*"><axsl:text>/</axsl:text><axsl:value-of select="name(.)"/><axsl:if test="preceding-sibling::*[name(.)=name(current())]"><axsl:text>[</axsl:text><axsl:value-of select="count(preceding-sibling::*[name(.)=name(current())])+1"/><axsl:text>]</axsl:text></axsl:if></axsl:for-each><axsl:if test="not(self::*)"><axsl:text/>/@<axsl:value-of select="name(.)"/></axsl:if></axsl:template>

<!--MODE: GENERATE-ID-FROM-PATH -->
<axsl:template match="/" mode="generate-id-from-path"/><axsl:template match="text()" mode="generate-id-from-path"><axsl:apply-templates select="parent::*" mode="generate-id-from-path"/><axsl:value-of select="concat('.text-', 1+count(preceding-sibling::text()), '-')"/></axsl:template><axsl:template match="comment()" mode="generate-id-from-path"><axsl:apply-templates select="parent::*" mode="generate-id-from-path"/><axsl:value-of select="concat('.comment-', 1+count(preceding-sibling::comment()), '-')"/></axsl:template><axsl:template match="processing-instruction()" mode="generate-id-from-path"><axsl:apply-templates select="parent::*" mode="generate-id-from-path"/><axsl:value-of select="concat('.processing-instruction-', 1+count(preceding-sibling::processing-instruction()), '-')"/></axsl:template><axsl:template match="@*" mode="generate-id-from-path"><axsl:apply-templates select="parent::*" mode="generate-id-from-path"/><axsl:value-of select="concat('.@', name())"/></axsl:template><axsl:template match="*" mode="generate-id-from-path" priority="-0.5"><axsl:apply-templates select="parent::*" mode="generate-id-from-path"/><axsl:text>.</axsl:text><axsl:value-of select="concat('.',name(),'-',1+count(preceding-sibling::*[name()=name(current())]),'-')"/></axsl:template><!--MODE: SCHEMATRON-FULL-PATH-3-->
<!--This mode can be used to generate prefixed XPath for humans 
	(Top-level element has index)-->
<axsl:template match="node() | @*" mode="schematron-get-full-path-3"><axsl:for-each select="ancestor-or-self::*"><axsl:text>/</axsl:text><axsl:value-of select="name(.)"/><axsl:if test="parent::*"><axsl:text>[</axsl:text><axsl:value-of select="count(preceding-sibling::*[name(.)=name(current())])+1"/><axsl:text>]</axsl:text></axsl:if></axsl:for-each><axsl:if test="not(self::*)"><axsl:text/>/@<axsl:value-of select="name(.)"/></axsl:if></axsl:template>

<!--MODE: GENERATE-ID-2 -->
<axsl:template match="/" mode="generate-id-2">U</axsl:template><axsl:template match="*" mode="generate-id-2" priority="2"><axsl:text>U</axsl:text><axsl:number level="multiple" count="*"/></axsl:template><axsl:template match="node()" mode="generate-id-2"><axsl:text>U.</axsl:text><axsl:number level="multiple" count="*"/><axsl:text>n</axsl:text><axsl:number count="node()"/></axsl:template><axsl:template match="@*" mode="generate-id-2"><axsl:text>U.</axsl:text><axsl:number level="multiple" count="*"/><axsl:text>_</axsl:text><axsl:value-of select="string-length(local-name(.))"/><axsl:text>_</axsl:text><axsl:value-of select="translate(name(),':','.')"/></axsl:template><!--Strip characters--><axsl:template match="text()" priority="-1"/>

<!--SCHEMA METADATA-->
<axsl:template match="/"><svrl:schematron-output xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" title="" schemaVersion=""><axsl:comment><axsl:value-of select="$archiveDirParameter"/>   
		 <axsl:value-of select="$archiveNameParameter"/>  
		 <axsl:value-of select="$fileNameParameter"/>  
		 <axsl:value-of select="$fileDirParameter"/></axsl:comment><svrl:active-pattern><axsl:attribute name="id">definedTypes</axsl:attribute><axsl:attribute name="name">IDL is using defined types</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M1"/><svrl:active-pattern><axsl:attribute name="name">partial interface refer to existing interface</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M2"/><svrl:active-pattern><axsl:attribute name="name">partial interface don't specify inheritance</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M3"/><svrl:active-pattern><axsl:attribute name="name">partial interface don't use forbidden extended attributes</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M4"/><svrl:active-pattern><axsl:attribute name="name">callback interface do not inherit from non callback interface</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M5"/><svrl:active-pattern><axsl:attribute name="name">callback interface don't have static attributes or operations</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M6"/><svrl:active-pattern><axsl:attribute name="name">callback interfaces should not be limited to a single operation</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M7"/><svrl:active-pattern><axsl:attribute name="name">regular interfaces do not inherit from callback interface</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M8"/><svrl:active-pattern><axsl:attribute name="name">Names of interfaces / exceptions / dictionaries don't clash</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M9"/><svrl:active-pattern><axsl:attribute name="name">Constant/Attribute names don't clash with other interface/exception members</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M10"/><svrl:active-pattern><axsl:attribute name="name">Dictionary member names don't clash with other dictionary members</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M11"/><svrl:active-pattern><axsl:attribute name="name">Operations</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M12"/><svrl:active-pattern><axsl:attribute name="name">Sequence are not to be used for attributes definition</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M13"/><svrl:active-pattern><axsl:attribute name="name">Dictionaries are not to be used for attributes or exception fields</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M14"/><svrl:active-pattern><axsl:attribute name="name">Special Operations</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M15"/><svrl:active-pattern><axsl:attribute name="name">Attribute with inherits getter</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M16"/><svrl:active-pattern><axsl:attribute name="name">Stringifier attributes</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M17"/><svrl:active-pattern><axsl:attribute name="name">Overloading</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M18"/><svrl:active-pattern><axsl:attribute name="name">Extended attributes are well-known</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M19"/><svrl:active-pattern><axsl:attribute name="name">Extended attribute common abstract rules</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M20"/><svrl:active-pattern><axsl:attribute name="name">Extended attribute Constructor</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M21"/><svrl:active-pattern><axsl:attribute name="name">Extended attribute NamedConstructor</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M22"/><svrl:active-pattern><axsl:attribute name="name">Extended attribute NoInterfaceObject</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M23"/><svrl:active-pattern><axsl:attribute name="name">Extended attribute OverrideBuiltins</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M24"/><svrl:active-pattern><axsl:attribute name="name">Extended Attribute NewObject</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M25"/><svrl:active-pattern><axsl:attribute name="name">Extended attribute Global</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M26"/><svrl:active-pattern><axsl:attribute name="name">Extended attribute EnsureUTF16</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M27"/><svrl:active-pattern><axsl:attribute name="name">Extended Attribute SameObject</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M28"/><svrl:active-pattern><axsl:attribute name="name">Extended Attribute PutForwards</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M29"/><svrl:active-pattern><axsl:attribute name="name">Extended Attribute Replaceable</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M30"/><svrl:active-pattern><axsl:attribute name="name">Extended Attribute TreatNullAs</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M31"/><svrl:active-pattern><axsl:attribute name="name">Extended Attribute TreatUndefinedAs</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M32"/><svrl:active-pattern><axsl:attribute name="name">Extended Attribute Clamp</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M33"/><svrl:active-pattern><axsl:attribute name="name">Extended attribute Unforgeable</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M34"/><svrl:active-pattern><axsl:attribute name="name">Extended attribute TreatNonCallableAsNull</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M35"/><svrl:active-pattern><axsl:attribute name="name">Extended attribute LegacyArrayClass</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M36"/><svrl:active-pattern><axsl:attribute name="name">Extended attribute EnforceRange</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M37"/><svrl:active-pattern><axsl:attribute name="name">Extended attribute ImplicitThis</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M38"/><svrl:active-pattern><axsl:attribute name="name">Extended attribute LenientThis</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M39"/><svrl:active-pattern><axsl:attribute name="name">Constants</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M40"/><svrl:active-pattern><axsl:attribute name="name">Warn against use of float instead of double</axsl:attribute><axsl:apply-templates/></svrl:active-pattern><axsl:apply-templates select="/" mode="M41"/></svrl:schematron-output></axsl:template>

<!--SCHEMATRON PATTERNS-->
<axsl:param name="standards" select="document('../web-platform/all.xml')"/>

<!--PATTERN definedTypesIDL is using defined types-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">IDL is using defined types</svrl:text>

	<!--RULE -->
<axsl:template match="//Type[@name]" priority="1000" mode="M1"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//Type[@name]"/>

		<!--ASSERT warning-->
<axsl:choose><axsl:when test="//Interface[@name=current()/@name] or $standards//Interface[@name=current()/@name] or //Dictionary[@name=current()/@name]  or $standards//Dictionary[@name=current()/@name] or //Typedef[@name=current()/@name] or $standards//Typedef[@name=current()/@name] or //Callback[@name=current()/@name] or $standards//Callback[@name=current()/@name] or //Enum[@name=current()/@name] or $standards//Enum[@name=current()/@name]"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="//Interface[@name=current()/@name] or $standards//Interface[@name=current()/@name] or //Dictionary[@name=current()/@name] or $standards//Dictionary[@name=current()/@name] or //Typedef[@name=current()/@name] or $standards//Typedef[@name=current()/@name] or //Callback[@name=current()/@name] or $standards//Callback[@name=current()/@name] or //Enum[@name=current()/@name] or $standards//Enum[@name=current()/@name]"><axsl:attribute name="role">warning</axsl:attribute><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="@name"/><axsl:text/> type used in <axsl:text/><axsl:value-of select="ancestor::*[local-name()='Interface' or local-name()='Dictionary'][1]/@name"/><axsl:text/>.<axsl:text/><axsl:value-of select="ancestor::*[Type and local-name()!='Type'][1]/@name"/><axsl:text/> declaration undefined.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M1"/></axsl:template><axsl:template match="text()" priority="-1" mode="M1"/><axsl:template match="@*|node()" priority="-2" mode="M1"><axsl:apply-templates select="@*|*" mode="M1"/></axsl:template>

<!--PATTERN partial interface refer to existing interface-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">partial interface refer to existing interface</svrl:text>

	<!--RULE -->
<axsl:template match="//Interface[@partial]" priority="1000" mode="M2"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//Interface[@partial]"/>

		<!--ASSERT warning-->
<axsl:choose><axsl:when test="//Interface[@name=current()/@name and not(@partial)] or $standards//Interface[@name=current()/@name and not(@partial)]"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="//Interface[@name=current()/@name and not(@partial)] or $standards//Interface[@name=current()/@name and not(@partial)]"><axsl:attribute name="role">warning</axsl:attribute><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Partial interface <axsl:text/><axsl:value-of select="@name"/><axsl:text/> does not have matching full interface</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M2"/></axsl:template><axsl:template match="text()" priority="-1" mode="M2"/><axsl:template match="@*|node()" priority="-2" mode="M2"><axsl:apply-templates select="@*|*" mode="M2"/></axsl:template>

<!--PATTERN partial interface don't specify inheritance-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">partial interface don't specify inheritance</svrl:text>

	<!--RULE -->
<axsl:template match="//Interface[@partial]" priority="1000" mode="M3"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//Interface[@partial]"/>

		<!--ASSERT warning-->
<axsl:choose><axsl:when test="not(InterfaceInheritance)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(InterfaceInheritance)"><axsl:attribute name="role">warning</axsl:attribute><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Partial interface <axsl:text/><axsl:value-of select="@name"/><axsl:text/> cannot specify interface inheritance</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M3"/></axsl:template><axsl:template match="text()" priority="-1" mode="M3"/><axsl:template match="@*|node()" priority="-2" mode="M3"><axsl:apply-templates select="@*|*" mode="M3"/></axsl:template>

<!--PATTERN partial interface don't use forbidden extended attributes-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">partial interface don't use forbidden extended attributes</svrl:text>

	<!--RULE -->
<axsl:template match="//Interface[@partial]" priority="1000" mode="M4"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//Interface[@partial]"/>

		<!--ASSERT warning-->
<axsl:choose><axsl:when test="not(ExtendedAttributeList/ExtendedAttribute[@name='Constructor' or @name='ImplicitThis' or @name='LegacyArrayClass' or @name='NamedConstructor' or @name='NoInterfaceObject'])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(ExtendedAttributeList/ExtendedAttribute[@name='Constructor' or @name='ImplicitThis' or @name='LegacyArrayClass' or @name='NamedConstructor' or @name='NoInterfaceObject'])"><axsl:attribute name="role">warning</axsl:attribute><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Partial interface <axsl:text/><axsl:value-of select="@name"/><axsl:text/> uses a forbidden extended attribute</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M4"/></axsl:template><axsl:template match="text()" priority="-1" mode="M4"/><axsl:template match="@*|node()" priority="-2" mode="M4"><axsl:apply-templates select="@*|*" mode="M4"/></axsl:template>

<!--PATTERN callback interface do not inherit from non callback interface-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">callback interface do not inherit from non callback interface</svrl:text>

	<!--RULE -->
<axsl:template match="//Interface[@callback]" priority="1000" mode="M5"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//Interface[@callback]"/>

		<!--ASSERT warning-->
<axsl:choose><axsl:when test="not(InterfaceInheritance) or (//Interface[@name=current()/InterfaceInheritance/Name/@name and @callback] or $standards//Interface[@name=current()/InterfaceInheritance/Name/@name and @callback])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(InterfaceInheritance) or (//Interface[@name=current()/InterfaceInheritance/Name/@name and @callback] or $standards//Interface[@name=current()/InterfaceInheritance/Name/@name and @callback])"><axsl:attribute name="role">warning</axsl:attribute><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Callback interface <axsl:text/><axsl:value-of select="@name"/><axsl:text/> inherits from non-callback interface <axsl:text/><axsl:value-of select="InterfaceInheritance/Name/@name"/><axsl:text/></svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M5"/></axsl:template><axsl:template match="text()" priority="-1" mode="M5"/><axsl:template match="@*|node()" priority="-2" mode="M5"><axsl:apply-templates select="@*|*" mode="M5"/></axsl:template>

<!--PATTERN callback interface don't have static attributes or operations-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">callback interface don't have static attributes or operations</svrl:text>

	<!--RULE -->
<axsl:template match="//Interface[@callback]" priority="1000" mode="M6"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//Interface[@callback]"/>

		<!--ASSERT warning-->
<axsl:choose><axsl:when test="not(Attribute[@static] or Operation[@static])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(Attribute[@static] or Operation[@static])"><axsl:attribute name="role">warning</axsl:attribute><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Callback interface <axsl:text/><axsl:value-of select="@name"/><axsl:text/> has a static attribute or operation <axsl:text/><axsl:value-of select="*[@static]/@name"/><axsl:text/></svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M6"/></axsl:template><axsl:template match="text()" priority="-1" mode="M6"/><axsl:template match="@*|node()" priority="-2" mode="M6"><axsl:apply-templates select="@*|*" mode="M6"/></axsl:template>

<!--PATTERN callback interfaces should not be limited to a single operation-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">callback interfaces should not be limited to a single operation</svrl:text>

	<!--RULE -->
<axsl:template match="//Interface[@callback]" priority="1000" mode="M7"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//Interface[@callback]"/>

		<!--ASSERT warning-->
<axsl:choose><axsl:when test="count(Attribute|Operation) &gt; 1 or Attribute"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="count(Attribute|Operation) &gt; 1 or Attribute"><axsl:attribute name="role">warning</axsl:attribute><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Callback interface <axsl:text/><axsl:value-of select="@name"/><axsl:text/> has only a single operation, it should use a callback function instead if no legacy requirement prevents it</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M7"/></axsl:template><axsl:template match="text()" priority="-1" mode="M7"/><axsl:template match="@*|node()" priority="-2" mode="M7"><axsl:apply-templates select="@*|*" mode="M7"/></axsl:template>

<!--PATTERN regular interfaces do not inherit from callback interface-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">regular interfaces do not inherit from callback interface</svrl:text>

	<!--RULE -->
<axsl:template match="//Interface[not(@callback)]" priority="1000" mode="M8"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//Interface[not(@callback)]"/>

		<!--ASSERT warning-->
<axsl:choose><axsl:when test="not(InterfaceInheritance) or (//Interface[@name=current()/InterfaceInheritance/Name/@name and not(@callback)] or $standards//Interface[@name=current()/InterfaceInheritance/Name/@name and not(@callback)])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(InterfaceInheritance) or (//Interface[@name=current()/InterfaceInheritance/Name/@name and not(@callback)] or $standards//Interface[@name=current()/InterfaceInheritance/Name/@name and not(@callback)])"><axsl:attribute name="role">warning</axsl:attribute><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Non-callback interface <axsl:text/><axsl:value-of select="@name"/><axsl:text/> inherits from callback interface <axsl:text/><axsl:value-of select="InterfaceInheritance/Name/@name"/><axsl:text/></svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M8"/></axsl:template><axsl:template match="text()" priority="-1" mode="M8"/><axsl:template match="@*|node()" priority="-2" mode="M8"><axsl:apply-templates select="@*|*" mode="M8"/></axsl:template>

<!--PATTERN Names of interfaces / exceptions / dictionaries don't clash-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Names of interfaces / exceptions / dictionaries don't clash</svrl:text>

	<!--RULE -->
<axsl:template match="//Typedef[@id]|//Dictionary[@id]" priority="1001" mode="M9"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//Typedef[@id]|//Dictionary[@id]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(preceding::*[local-name()='Interface' or local-name()='Typedef' or local-name()='Dictionary'][@id=current()/@id])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(preceding::*[local-name()='Interface' or local-name()='Typedef' or local-name()='Dictionary'][@id=current()/@id])"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(.), ' ', @name)"/><axsl:text/> clashes with previous definition of <axsl:text/><axsl:value-of select="concat(local-name(preceding::*[local-name()='Interface'  or local-name()='Typedef' or local-name()='Dictionary'][@name=current()/@name][1]),' ', @name)"/><axsl:text/></svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M9"/></axsl:template>

	<!--RULE -->
<axsl:template match="//Interface[@id]" priority="1000" mode="M9"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//Interface[@id]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="(@partial or not(preceding::Interface[@id=current()/@id])) or not(preceding::*[local-name()='Typedef' or local-name()='Dictionary'][@id=current()/@id])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="(@partial or not(preceding::Interface[@id=current()/@id])) or not(preceding::*[local-name()='Typedef' or local-name()='Dictionary'][@id=current()/@id])"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(.), ' ', @name)"/><axsl:text/> clashes with previous definition of <axsl:text/><axsl:value-of select="concat(local-name(preceding::*[local-name()='Interface' or local-name()='Typedef' or local-name()='Dictionary'][@name=current()/@name][1]),' ', @name)"/><axsl:text/></svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M9"/></axsl:template><axsl:template match="text()" priority="-1" mode="M9"/><axsl:template match="@*|node()" priority="-2" mode="M9"><axsl:apply-templates select="@*|*" mode="M9"/></axsl:template>

<!--PATTERN Constant/Attribute names don't clash with other interface/exception members-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Constant/Attribute names don't clash with other interface/exception members</svrl:text>

	<!--RULE -->
<axsl:template match="//Const|//Attribute" priority="1000" mode="M10"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//Const|//Attribute"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(preceding-sibling::*[local-name()='Operation' or local-name()='Attribute' or local-name()='Const'][@name=current()/@name])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(preceding-sibling::*[local-name()='Operation' or local-name()='Attribute' or local-name()='Const'][@name=current()/@name])"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(), ' ', @name)"/><axsl:text/> in <axsl:text/><axsl:value-of select="concat(local-name(parent::*), ' ', parent::*/@name)"/><axsl:text/> clashes with another interface member.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M10"/></axsl:template><axsl:template match="text()" priority="-1" mode="M10"/><axsl:template match="@*|node()" priority="-2" mode="M10"><axsl:apply-templates select="@*|*" mode="M10"/></axsl:template>

<!--PATTERN Dictionary member names don't clash with other dictionary members-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Dictionary member names don't clash with other dictionary members</svrl:text>

	<!--RULE -->
<axsl:template match="//DictionaryMember" priority="1000" mode="M11"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//DictionaryMember"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(preceding-sibling::DictionaryMember[@name=current()/@name])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(preceding-sibling::DictionaryMember[@name=current()/@name])"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Dictionary member <axsl:text/><axsl:value-of select="@name"/><axsl:text/> in <axsl:text/><axsl:value-of select="parent::Dictionary/@name"/><axsl:text/> clashes with another dictionary member.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M11"/></axsl:template><axsl:template match="text()" priority="-1" mode="M11"/><axsl:template match="@*|node()" priority="-2" mode="M11"><axsl:apply-templates select="@*|*" mode="M11"/></axsl:template>

<!--PATTERN Operations-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Operations</svrl:text>

	<!--RULE -->
<axsl:template match="//Operation" priority="1000" mode="M12"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//Operation"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="@name or @stringifier or @getter or @setter or @creator or @deleter or @legacycaller"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="@name or @stringifier or @getter or @setter or @creator or @deleter or @legacycaller"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*), ' ', parent::*/@name)"/><axsl:text/> has an operation without identifier but which is not a special operation.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(preceding-sibling::*[local-name()='Attribute' or local-name()='Const'][@name=current()/@name])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(preceding-sibling::*[local-name()='Attribute' or local-name()='Const'][@name=current()/@name])"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(), ' ', @name)"/><axsl:text/> in <axsl:text/><axsl:value-of select="concat(local-name(parent::*), ' ', parent::*/@name)"/><axsl:text/> clashes with another interface member.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(ArgumentList/Argument[@ellipsis]) or not(ArgumentList/Argument[@ellipsis]/following-sibling::Argument)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(ArgumentList/Argument[@ellipsis]) or not(ArgumentList/Argument[@ellipsis]/following-sibling::Argument)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*), ' ', parent::*/@name)"/><axsl:text/> defines a variadic operation (<axsl:text/><axsl:value-of select="@name"/><axsl:text/>) but the ... is not set on the last argument.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(ArgumentList/Argument[@ellipsis and @optional])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(ArgumentList/Argument[@ellipsis and @optional])"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*), ' ', parent::*/@name)"/><axsl:text/> defines a variadic operation (<axsl:text/><axsl:value-of select="@name"/><axsl:text/>) whose final argument is declared optional.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M12"/></axsl:template><axsl:template match="text()" priority="-1" mode="M12"/><axsl:template match="@*|node()" priority="-2" mode="M12"><axsl:apply-templates select="@*|*" mode="M12"/></axsl:template>

<!--PATTERN Sequence are not to be used for attributes definition-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Sequence are not to be used for attributes definition</svrl:text>

	<!--RULE -->
<axsl:template match="//Attribute" priority="1000" mode="M13"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//Attribute"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(Type[@type='sequence']) and not(//Typedef[@name=current()/Type/@name]/Type[@type='sequence'])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(Type[@type='sequence']) and not(//Typedef[@name=current()/Type/@name]/Type[@type='sequence'])"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> in <axsl:text/><axsl:value-of select="concat(local-name(parent::*),' ',parent::*/@name)"/><axsl:text/> is defined as a sequence.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M13"/></axsl:template><axsl:template match="text()" priority="-1" mode="M13"/><axsl:template match="@*|node()" priority="-2" mode="M13"><axsl:apply-templates select="@*|*" mode="M13"/></axsl:template>

<!--PATTERN Dictionaries are not to be used for attributes or exception fields-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Dictionaries are not to be used for attributes or exception fields</svrl:text>

	<!--RULE -->
<axsl:template match="//Attribute" priority="1000" mode="M14"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//Attribute"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(//Dictionary[@name=current()/Type/@name])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(//Dictionary[@name=current()/Type/@name])"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(),' ',@name)"/><axsl:text/> in <axsl:text/><axsl:value-of select="concat(local-name(parent::*),' ',parent::*/@name)"/><axsl:text/> is defined as a dictionary.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M14"/></axsl:template><axsl:template match="text()" priority="-1" mode="M14"/><axsl:template match="@*|node()" priority="-2" mode="M14"><axsl:apply-templates select="@*|*" mode="M14"/></axsl:template>

<!--PATTERN Special Operations-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Special Operations</svrl:text>

	<!--RULE -->
<axsl:template match="//Operation[@stringifier or @getter or @setter or @creator or @deleter or @legacycaller]" priority="1000" mode="M15"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//Operation[@stringifier or @getter or @setter or @creator or @deleter or @legacycaller]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@stringifier) or not(preceding-sibling::*[@stringifier])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@stringifier) or not(preceding-sibling::*[@stringifier])"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*),' ',parent::*/@name)"/><axsl:text/> defines more than one stringifier.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@getter) or not(ArgumentList/Argument[1]/Type/@type='unsigned long') or not(preceding-sibling::Operation[@getter]) or not(preceding-sibling::Operation[@getter]/ArgumentList/Argument[1]/Type/@type=current()/ArgumentList/Argument[1]/Type/@type)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@getter) or not(ArgumentList/Argument[1]/Type/@type='unsigned long') or not(preceding-sibling::Operation[@getter]) or not(preceding-sibling::Operation[@getter]/ArgumentList/Argument[1]/Type/@type=current()/ArgumentList/Argument[1]/Type/@type)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*),' ',parent::*/@name)"/><axsl:text/> defines more than one index getter.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@getter) or not(ArgumentList/Argument[1]/Type/@type='DOMString') or not(preceding-sibling::Operation[@getter]) or not(preceding-sibling::Operation[@getter]/ArgumentList/Argument[1]/Type/@type=current()/ArgumentList/Argument[1]/Type/@type)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@getter) or not(ArgumentList/Argument[1]/Type/@type='DOMString') or not(preceding-sibling::Operation[@getter]) or not(preceding-sibling::Operation[@getter]/ArgumentList/Argument[1]/Type/@type=current()/ArgumentList/Argument[1]/Type/@type)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*),' ',parent::*/@name)"/><axsl:text/> defines more than one name getter.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@deleter) or not(ArgumentList/Argument[1]/Type/@type='unsigned long') or not(preceding-sibling::Operation[@deleter]) or not(preceding-sibling::Operation[@deleter]/ArgumentList/Argument[1]/Type/@type=current()/ArgumentList/Argument[1]/Type/@type)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@deleter) or not(ArgumentList/Argument[1]/Type/@type='unsigned long') or not(preceding-sibling::Operation[@deleter]) or not(preceding-sibling::Operation[@deleter]/ArgumentList/Argument[1]/Type/@type=current()/ArgumentList/Argument[1]/Type/@type)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*),' ',parent::*/@name)"/><axsl:text/> defines more than one index deleter.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@deleter) or not(ArgumentList/Argument[1]/Type/@type='DOMString') or not(preceding-sibling::Operation[@deleter]) or not(preceding-sibling::Operation[@deleter]/ArgumentList/Argument[1]/Type/@type=current()/ArgumentList/Argument[1]/Type/@type)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@deleter) or not(ArgumentList/Argument[1]/Type/@type='DOMString') or not(preceding-sibling::Operation[@deleter]) or not(preceding-sibling::Operation[@deleter]/ArgumentList/Argument[1]/Type/@type=current()/ArgumentList/Argument[1]/Type/@type)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*),' ',parent::*/@name)"/><axsl:text/> defines more than one name deleter.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@setter) or not(ArgumentList/Argument[1]/Type/@type='unsigned long') or not(preceding-sibling::Operation[@setter]) or not(preceding-sibling::Operation[@setter]/ArgumentList/Argument[1]/Type/@type=current()/ArgumentList/Argument[1]/Type/@type)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@setter) or not(ArgumentList/Argument[1]/Type/@type='unsigned long') or not(preceding-sibling::Operation[@setter]) or not(preceding-sibling::Operation[@setter]/ArgumentList/Argument[1]/Type/@type=current()/ArgumentList/Argument[1]/Type/@type)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*),' ',parent::*/@name)"/><axsl:text/> defines more than one index setter.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@setter) or not(ArgumentList/Argument[1]/Type/@type='DOMString') or not(preceding-sibling::Operation[@setter]) or not(preceding-sibling::Operation[@setter]/ArgumentList/Argument[1]/Type/@type=current()/ArgumentList/Argument[1]/Type/@type)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@setter) or not(ArgumentList/Argument[1]/Type/@type='DOMString') or not(preceding-sibling::Operation[@setter]) or not(preceding-sibling::Operation[@setter]/ArgumentList/Argument[1]/Type/@type=current()/ArgumentList/Argument[1]/Type/@type)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*),' ',parent::*/@name)"/><axsl:text/> defines more than one name setter.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@creator) or not(ArgumentList/Argument[1]/Type/@type='unsigned long') or not(preceding-sibling::Operation[@creator]) or not(preceding-sibling::Operation[@creator]/ArgumentList/Argument[1]/Type/@type=current()/ArgumentList/Argument[1]/Type/@type)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@creator) or not(ArgumentList/Argument[1]/Type/@type='unsigned long') or not(preceding-sibling::Operation[@creator]) or not(preceding-sibling::Operation[@creator]/ArgumentList/Argument[1]/Type/@type=current()/ArgumentList/Argument[1]/Type/@type)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*),' ',parent::*/@name)"/><axsl:text/> defines more than one index creator.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@creator) or not(ArgumentList/Argument[1]/Type/@type='DOMString') or not(preceding-sibling::Operation[@creator]) or not(preceding-sibling::Operation[@creator]/ArgumentList/Argument[1]/Type/@type=current()/ArgumentList/Argument[1]/Type/@type)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@creator) or not(ArgumentList/Argument[1]/Type/@type='DOMString') or not(preceding-sibling::Operation[@creator]) or not(preceding-sibling::Operation[@creator]/ArgumentList/Argument[1]/Type/@type=current()/ArgumentList/Argument[1]/Type/@type)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*),' ',parent::*/@name)"/><axsl:text/> defines more than one name creator.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(ArgumentList/Argument/@ellipsis)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(ArgumentList/Argument/@ellipsis)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*),' ',parent::*/@name)"/><axsl:text/> defines a special operation that is variadic.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(ArgumentList/Argument/@optional)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(ArgumentList/Argument/@optional)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*),' ',parent::*/@name)"/><axsl:text/> defines a special operation with optional arguments.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@stringifier) or not(ArgumentList/Argument)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@stringifier) or not(ArgumentList/Argument)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*),' ',parent::*/@name)"/><axsl:text/> defines a stringifier operation with arguments.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@stringifier) or Type/@type='DOMString'"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@stringifier) or Type/@type='DOMString'"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*),' ',parent::*/@name)"/><axsl:text/> defines a stringifier operation with a return type that is not a DOMString.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@getter) or count(ArgumentList/Argument)=1"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@getter) or count(ArgumentList/Argument)=1"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*),' ',parent::*/@name)"/><axsl:text/> defines a getter operation that doesn't take a single argument.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@deleter) or count(ArgumentList/Argument)=1"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@deleter) or count(ArgumentList/Argument)=1"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*),' ',parent::*/@name)"/><axsl:text/> defines a deleter operation that doesn't take a single argument.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@setter) or count(ArgumentList/Argument)=2"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@setter) or count(ArgumentList/Argument)=2"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*),' ',parent::*/@name)"/><axsl:text/> defines a setter operation that doesn't take exactly two arguments.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@creator) or count(ArgumentList/Argument)=2"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@creator) or count(ArgumentList/Argument)=2"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*),' ',parent::*/@name)"/><axsl:text/> defines a creator operation that doesn't take exactly two arguments.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@getter) or ArgumentList/Argument[1]/Type/@type='DOMString' or ArgumentList/Argument[1]/Type/@type='unsigned long'"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@getter) or ArgumentList/Argument[1]/Type/@type='DOMString' or ArgumentList/Argument[1]/Type/@type='unsigned long'"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*),' ',parent::*/@name)"/><axsl:text/> defines a getter operation with first argument different from DOMString and unsigned long.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@setter) or ArgumentList/Argument[1]/Type/@type='DOMString' or ArgumentList/Argument[1]/Type/@type='unsigned long'"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@setter) or ArgumentList/Argument[1]/Type/@type='DOMString' or ArgumentList/Argument[1]/Type/@type='unsigned long'"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*),' ',parent::*/@name)"/><axsl:text/> defines a setter operation with first argument different from DOMString and unsigned long.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@deleter) or ArgumentList/Argument[1]/Type/@type='DOMString' or ArgumentList/Argument[1]/Type/@type='unsigned long'"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@deleter) or ArgumentList/Argument[1]/Type/@type='DOMString' or ArgumentList/Argument[1]/Type/@type='unsigned long'"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*),' ',parent::*/@name)"/><axsl:text/> defines a deleter operation with first argument different from DOMString and unsigned long.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@creator) or ArgumentList/Argument[1]/Type/@type='DOMString' or ArgumentList/Argument[1]/Type/@type='unsigned long'"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@creator) or ArgumentList/Argument[1]/Type/@type='DOMString' or ArgumentList/Argument[1]/Type/@type='unsigned long'"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*),' ',parent::*/@name)"/><axsl:text/> defines a creator operation with first argument different from DOMString and unsigned long.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT warning-->
<axsl:choose><axsl:when test="not(@legacycaller)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@legacycaller)"><axsl:attribute name="role">warning</axsl:attribute><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*),' ',parent::*/@name)"/><axsl:text/> defines a caller operation, but caller should be reserved to specify legacy APIs</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@setter) or (ancestor::Interface/Operation[@getter and ArgumentList/Argument[1]/Type/@type=current()/ArgumentList/Argument[1]/Type/@type])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@setter) or (ancestor::Interface/Operation[@getter and ArgumentList/Argument[1]/Type/@type=current()/ArgumentList/Argument[1]/Type/@type])"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*),' ',parent::*/@name)"/><axsl:text/> defines a setter but does not define a getter of the same variety.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@creator) or (ancestor::Interface/Operation[@getter and ArgumentList/Argument[1]/Type/@type=current()/ArgumentList/Argument[1]/Type/@type])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@creator) or (ancestor::Interface/Operation[@getter and ArgumentList/Argument[1]/Type/@type=current()/ArgumentList/Argument[1]/Type/@type])"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*),' ',parent::*/@name)"/><axsl:text/> defines a creator but does not define a getter of the same variety.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@deleter) or (ancestor::Interface/Operation[@getter and ArgumentList/Argument[1]/Type/@type=current()/ArgumentList/Argument[1]/Type/@type])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@deleter) or (ancestor::Interface/Operation[@getter and ArgumentList/Argument[1]/Type/@type=current()/ArgumentList/Argument[1]/Type/@type])"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*),' ',parent::*/@name)"/><axsl:text/> defines a deleter but does not define a getter of the same variety.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M15"/></axsl:template><axsl:template match="text()" priority="-1" mode="M15"/><axsl:template match="@*|node()" priority="-2" mode="M15"><axsl:apply-templates select="@*|*" mode="M15"/></axsl:template>

<!--PATTERN Attribute with inherits getter-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Attribute with inherits getter</svrl:text>

	<!--RULE -->
<axsl:template match="//Attribute[@inherit='inherit']" priority="1000" mode="M16"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//Attribute[@inherit='inherit']"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@readonly='readonly' or @static='static')"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@readonly='readonly' or @static='static')"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Attribute <axsl:text/><axsl:value-of select="concat(ancestor::Interface/@name, '.', @name)"/><axsl:text/> inherits a getter but is marked as readonly or static.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="ancestor::Interface[InterfaceInheritance]"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="ancestor::Interface[InterfaceInheritance]"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Attribute <axsl:text/><axsl:value-of select="concat(ancestor::Interface/@name, '.', @name)"/><axsl:text/> inherits a getter but does not belong to an interface with inheritance.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(ancestor::Interface[InterfaceInheritance] and //Interface[@name=current()/ancestor::Interface/InterfaceInheritance/Name/@name] and //Interface[@name=current()/ancestor::Interface/InterfaceInheritance/Name/@name]/Attribute[@name=current()/@name])          or //Interface[@name=current()/ancestor::Interface/InterfaceInheritance/Name/@name]/Attribute[@name=current()/@name]/Type[concat(@type,@name)=concat(current()/Type/@type,current()/Type/@name)]"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(ancestor::Interface[InterfaceInheritance] and //Interface[@name=current()/ancestor::Interface/InterfaceInheritance/Name/@name] and //Interface[@name=current()/ancestor::Interface/InterfaceInheritance/Name/@name]/Attribute[@name=current()/@name]) or //Interface[@name=current()/ancestor::Interface/InterfaceInheritance/Name/@name]/Attribute[@name=current()/@name]/Type[concat(@type,@name)=concat(current()/Type/@type,current()/Type/@name)]"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Attribute <axsl:text/><axsl:value-of select="concat(ancestor::Interface/@name, '.', @name)"/><axsl:text/> inherits a getter but does not have the same type (<axsl:text/><axsl:value-of select="concat(Type/@name,Type/@type)"/><axsl:text/>) as the attribute <axsl:text/><axsl:value-of select="concat(//Interface[@name=current()/ancestor::Interface/InterfaceInheritance/Name/@name]/@name, '.', //Interface[@name=current()/ancestor::Interface/InterfaceInheritance/Name/@name]/Attribute/@name)"/><axsl:text/> (<axsl:text/><axsl:value-of select="concat(//Interface[@name=current()/ancestor::Interface/InterfaceInheritance/Name/@name]/Attribute[@name=current()/@name]/Type/@type, //Interface[@name=current()/ancestor::Interface/InterfaceInheritance/Name/@name]/Attribute[@name=current()/@name]/Type/@name)"/><axsl:text/>) it inherits from.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(ancestor::Interface[InterfaceInheritance] and //Interface[@name=current()/ancestor::Interface/InterfaceInheritance/Name/@name] and //Interface[@name=current()/ancestor::Interface/InterfaceInheritance/Name/@name]/Attribute[@name=current()/@name])          or //Interface[@name=current()/ancestor::Interface/InterfaceInheritance/Name/@name]/Attribute[@name=current()/@name]/@readonly='readonly'"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(ancestor::Interface[InterfaceInheritance] and //Interface[@name=current()/ancestor::Interface/InterfaceInheritance/Name/@name] and //Interface[@name=current()/ancestor::Interface/InterfaceInheritance/Name/@name]/Attribute[@name=current()/@name]) or //Interface[@name=current()/ancestor::Interface/InterfaceInheritance/Name/@name]/Attribute[@name=current()/@name]/@readonly='readonly'"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Attribute <axsl:text/><axsl:value-of select="concat(ancestor::Interface/@name, '.', @name)"/><axsl:text/> inherits a getter, but that attribute is not marked as read-only on the inherited interface <axsl:text/><axsl:value-of select="//Interface[@name=current()/ancestor::Interface/InterfaceInheritance/Name/@name]/@name"/><axsl:text/>.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M16"/></axsl:template><axsl:template match="text()" priority="-1" mode="M16"/><axsl:template match="@*|node()" priority="-2" mode="M16"><axsl:apply-templates select="@*|*" mode="M16"/></axsl:template>

<!--PATTERN Stringifier attributes-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Stringifier attributes</svrl:text>

	<!--RULE -->
<axsl:template match="//Attribute[@stringifier]" priority="1000" mode="M17"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//Attribute[@stringifier]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="Type/@type='DOMString'"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="Type/@type='DOMString'"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*),' ',parent::*/@name)"/><axsl:text/> defines a stringifier attribute that is not of type DOMString.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(preceding-sibling::*[@stringifier])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(preceding-sibling::*[@stringifier])"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*),' ',parent::*/@name)"/><axsl:text/> defines more than one stringifier.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M17"/></axsl:template><axsl:template match="text()" priority="-1" mode="M17"/><axsl:template match="@*|node()" priority="-2" mode="M17"><axsl:apply-templates select="@*|*" mode="M17"/></axsl:template>

<!--PATTERN Overloading-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Overloading</svrl:text><axsl:template match="text()" priority="-1" mode="M18"/><axsl:template match="@*|node()" priority="-2" mode="M18"><axsl:apply-templates select="@*|*" mode="M18"/></axsl:template>

<!--PATTERN Extended attributes are well-known-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Extended attributes are well-known</svrl:text>

	<!--RULE -->
<axsl:template match="//ExtendedAttribute[@name]" priority="1000" mode="M19"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//ExtendedAttribute[@name]"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="@name='Constructor' or @name='NamedConstructor' or @name='NoInterfaceObject' or @name='OverrideBuiltins' or @name='PutForwards' or @name='Replaceable' or @name='TreatNullAs' or @name='TreatUndefinedAs' or @name='TreatNonCallableAsNull' or @name='TreatNonCallableAsNull' or @name='Clamp' or @name='Unforgeable' or @name='EnforceRange' or @name='ImplicitThis' or @name='LenientThis' or @name='SameObject' or @name='NewObject' or @name='EnsureUTF16' or @name='Global' or @name='MapClass' or @name='Exposed' or @name='LegacyArrayClass'"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="@name='Constructor' or @name='NamedConstructor' or @name='NoInterfaceObject' or @name='OverrideBuiltins' or @name='PutForwards' or @name='Replaceable' or @name='TreatNullAs' or @name='TreatUndefinedAs' or @name='TreatNonCallableAsNull' or @name='TreatNonCallableAsNull' or @name='Clamp' or @name='Unforgeable' or @name='EnforceRange' or @name='ImplicitThis' or @name='LenientThis' or @name='SameObject' or @name='NewObject' or @name='EnsureUTF16' or @name='Global' or @name='MapClass' or @name='Exposed' or @name='LegacyArrayClass'"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute of <axsl:text/><axsl:value-of select="@name"/><axsl:text/> is unknown in WebIDL.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M19"/></axsl:template><axsl:template match="text()" priority="-1" mode="M19"/><axsl:template match="@*|node()" priority="-2" mode="M19"><axsl:apply-templates select="@*|*" mode="M19"/></axsl:template>

<!--PATTERN Extended attribute common abstract rules-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Extended attribute common abstract rules</svrl:text><axsl:template match="text()" priority="-1" mode="M20"/><axsl:template match="@*|node()" priority="-2" mode="M20"><axsl:apply-templates select="@*|*" mode="M20"/></axsl:template>

<!--PATTERN Extended attribute Constructor-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Extended attribute Constructor</svrl:text>

	<!--RULE -->
<axsl:template match="//ExtendedAttribute[@name='Constructor']" priority="1000" mode="M21"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//ExtendedAttribute[@name='Constructor']"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="parent::ExtendedAttributeList/parent::Interface or parent::ExtendedAttributeList/parent::Dictionary"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="parent::ExtendedAttributeList/parent::Interface or parent::ExtendedAttributeList/parent::Dictionary"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used on <axsl:text/><axsl:value-of select="local-name(parent::ExtendedAttributeList/parent::*)"/><axsl:text/> — <axsl:text/><axsl:value-of select="@name"/><axsl:text/> expected only on interfaces and dictionaries.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M21"/></axsl:template><axsl:template match="text()" priority="-1" mode="M21"/><axsl:template match="@*|node()" priority="-2" mode="M21"><axsl:apply-templates select="@*|*" mode="M21"/></axsl:template>

<!--PATTERN Extended attribute NamedConstructor-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Extended attribute NamedConstructor</svrl:text>

	<!--RULE -->
<axsl:template match="//ExtendedAttribute[@name='NamedConstructor']" priority="1000" mode="M22"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//ExtendedAttribute[@name='NamedConstructor']"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="parent::ExtendedAttributeList/parent::Interface"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="parent::ExtendedAttributeList/parent::Interface"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used on <axsl:text/><axsl:value-of select="local-name(parent::ExtendedAttributeList/parent::*)"/><axsl:text/> — <axsl:text/><axsl:value-of select="@name"/><axsl:text/> expected only on interfaces.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(parent::ExtendedAttributeList/parent::Interface/preceding::Interface/ExtendedAttributeList/ExtendedAttribute[@name='NamedConstructor' and @value=current()/@value])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(parent::ExtendedAttributeList/parent::Interface/preceding::Interface/ExtendedAttributeList/ExtendedAttribute[@name='NamedConstructor' and @value=current()/@value])"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute NamedConstructor with identifier <axsl:text/><axsl:value-of select="@value"/><axsl:text/> in <axsl:text/><axsl:value-of select="parent::ExtendedAttributeList/parent::Interface/@name"/><axsl:text/> interface clashes with NamedConstructor on interface <axsl:text/><axsl:value-of select="parent::ExtendedAttributeList/parent::Interface/preceding::Interface[ExtendedAttributeList/ExtendedAttribute[@name='NamedConstructor' and @value=current()/@value]]/@name"/><axsl:text/>.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not($standards//Interface/ExtendedAttributeList/ExtendedAttribute[@name='NamedConstructor' and @value=current()/@value])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not($standards//Interface/ExtendedAttributeList/ExtendedAttribute[@name='NamedConstructor' and @value=current()/@value])"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute NamedConstructor with identifier <axsl:text/><axsl:value-of select="@value"/><axsl:text/> in <axsl:text/><axsl:value-of select="parent::ExtendedAttributeList/parent::Interface/@name"/><axsl:text/> interface clashes with NamedConstructor on externally defined interface <axsl:text/><axsl:value-of select="$standards//Interface[ExtendedAttributeList/ExtendedAttribute[@name='NamedConstructor' and @value=current()/@value]]/@name"/><axsl:text/>.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(parent::ExtendedAttributeList/parent::Interface/preceding::Interface[not(ExtendedAttributeList/ExtendedAttribute[@name='NoInterfaceObject'])][@name=current()/@value])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(parent::ExtendedAttributeList/parent::Interface/preceding::Interface[not(ExtendedAttributeList/ExtendedAttribute[@name='NoInterfaceObject'])][@name=current()/@value])"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute NamedConstructor with identifier <axsl:text/><axsl:value-of select="@value"/><axsl:text/> in <axsl:text/><axsl:value-of select="parent::ExtendedAttributeList/parent::Interface/@name"/><axsl:text/> interface clashes with  interface <axsl:text/><axsl:value-of select="parent::ExtendedAttributeList/parent::Interface/preceding::Interface[not(ExtendedAttributeList/ExtendedAttribute[@name='NoInterfaceObject'])][@name=current()/@value]/@name"/><axsl:text/>.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not($standards//Interface[not(ExtendedAttributeList/ExtendedAttribute[@name='NoInterfaceObject'])][@name=current()/@value])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not($standards//Interface[not(ExtendedAttributeList/ExtendedAttribute[@name='NoInterfaceObject'])][@name=current()/@value])"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute NamedConstructor with identifier <axsl:text/><axsl:value-of select="@value"/><axsl:text/> in <axsl:text/><axsl:value-of select="parent::ExtendedAttributeList/parent::Interface/@name"/><axsl:text/> interface clashes with externally defined interface <axsl:text/><axsl:value-of select="$standards//Interface[not(ExtendedAttributeList/ExtendedAttribute[@name='NoInterfaceObject'])][@name=current()/@value]/@name"/><axsl:text/>.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M22"/></axsl:template><axsl:template match="text()" priority="-1" mode="M22"/><axsl:template match="@*|node()" priority="-2" mode="M22"><axsl:apply-templates select="@*|*" mode="M22"/></axsl:template>

<!--PATTERN Extended attribute NoInterfaceObject-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Extended attribute NoInterfaceObject</svrl:text>

	<!--RULE -->
<axsl:template match="//ExtendedAttribute[@name='NoInterfaceObject']" priority="1000" mode="M23"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//ExtendedAttribute[@name='NoInterfaceObject']"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="parent::ExtendedAttributeList/parent::Interface"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="parent::ExtendedAttributeList/parent::Interface"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute NoInterfaceObject used on <axsl:text/><axsl:value-of select="local-name(parent::ExtendedAttributeList/parent::*)"/><axsl:text/> — NoInterfaceObject expected only on interfaces.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@value)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@value)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used with arguments on <axsl:text/><axsl:value-of select="concat(local-name(parent::ExtendedAttributeList/parent::*),' ',parent::ExtendedAttributeList/parent::*/@name)"/><axsl:text/>.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(parent::ExtendedAttributeList/ExtendedAttribute[@name='Constructor'])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(parent::ExtendedAttributeList/ExtendedAttribute[@name='Constructor'])"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute NoInterfaceObject used in combination with extended attribute Constructor on interface <axsl:text/><axsl:value-of select="parent::ExtendedAttributeList/parent::*/@name"/><axsl:text/>.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(ancestor::Interface/Operation[@static='static'])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(ancestor::Interface/Operation[@static='static'])"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute NoInterfaceObject used on interface <axsl:text/><axsl:value-of select="parent::ExtendedAttributeList/parent::*/@name"/><axsl:text/>, but that interface that has a static operation .</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M23"/></axsl:template><axsl:template match="text()" priority="-1" mode="M23"/><axsl:template match="@*|node()" priority="-2" mode="M23"><axsl:apply-templates select="@*|*" mode="M23"/></axsl:template>

<!--PATTERN Extended attribute OverrideBuiltins-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Extended attribute OverrideBuiltins</svrl:text>

	<!--RULE -->
<axsl:template match="//ExtendedAttribute[@name='OverrideBuiltins']" priority="1000" mode="M24"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//ExtendedAttribute[@name='OverrideBuiltins']"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="parent::ExtendedAttributeList/parent::Interface"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="parent::ExtendedAttributeList/parent::Interface"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used on <axsl:text/><axsl:value-of select="local-name(parent::ExtendedAttributeList/parent::*)"/><axsl:text/> — <axsl:text/><axsl:value-of select="@name"/><axsl:text/> expected only on interfaces.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@value)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@value)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used with arguments on <axsl:text/><axsl:value-of select="concat(local-name(parent::ExtendedAttributeList/parent::*),' ',parent::ExtendedAttributeList/parent::*/@name)"/><axsl:text/>.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="parent::ExtendedAttributeList/parent::Interface[Operation/@getter]"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="parent::ExtendedAttributeList/parent::Interface[Operation/@getter]"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute OverrideBuiltins used on interface <axsl:text/><axsl:value-of select="parent::ExtendedAttributeList/parent::Interface/@name"/><axsl:text/> that does not have a name getter.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M24"/></axsl:template><axsl:template match="text()" priority="-1" mode="M24"/><axsl:template match="@*|node()" priority="-2" mode="M24"><axsl:apply-templates select="@*|*" mode="M24"/></axsl:template>

<!--PATTERN Extended Attribute NewObject-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Extended Attribute NewObject</svrl:text>

	<!--RULE -->
<axsl:template match="//ExtendedAttribute[@name='NewObject']" priority="1000" mode="M25"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//ExtendedAttribute[@name='NewObject']"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@value)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@value)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used with arguments on <axsl:text/><axsl:value-of select="concat(local-name(parent::ExtendedAttributeList/parent::*),' ',parent::ExtendedAttributeList/parent::*/@name)"/><axsl:text/>.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="parent::ExtendedAttributeList/parent::Operation"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="parent::ExtendedAttributeList/parent::Operation"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute NewObject used on <axsl:text/><axsl:value-of select="local-name(parent::ExtendedAttributeList/parent::*)"/><axsl:text/> — NewObject expected only on operations.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(parent::ExtendedAttributeList/parent::Operation) or parent::ExtendedAttributeList/parent::Operation/@name"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(parent::ExtendedAttributeList/parent::Operation) or parent::ExtendedAttributeList/parent::Operation/@name"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute NewObject used on an operation without identifier in <axsl:text/><axsl:value-of select="ancestor::Interface/@name"/><axsl:text/> — NewObject expected only on regular or static operations.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(parent::ExtendedAttributeList/parent::Operation/Type) or parent::ExtendedAttributeList/parent::Operation/Type/@name or parent::ExtendedAttributeList/parent::Operation/Type/@type='Promise'"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(parent::ExtendedAttributeList/parent::Operation/Type) or parent::ExtendedAttributeList/parent::Operation/Type/@name or parent::ExtendedAttributeList/parent::Operation/Type/@type='Promise'"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute NewObject used on an operation whose return type (<axsl:text/><axsl:value-of select="parent::ExtendedAttributeList/parent::Operation/Type/@type"/><axsl:text/>) is not an interface type or a promise.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M25"/></axsl:template><axsl:template match="text()" priority="-1" mode="M25"/><axsl:template match="@*|node()" priority="-2" mode="M25"><axsl:apply-templates select="@*|*" mode="M25"/></axsl:template>

<!--PATTERN Extended attribute Global-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Extended attribute Global</svrl:text>

	<!--RULE -->
<axsl:template match="//ExtendedAttribute[@name='Global']" priority="1000" mode="M26"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//ExtendedAttribute[@name='Global']"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="parent::ExtendedAttributeList/parent::Interface"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="parent::ExtendedAttributeList/parent::Interface"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used on <axsl:text/><axsl:value-of select="local-name(parent::ExtendedAttributeList/parent::*)"/><axsl:text/> — <axsl:text/><axsl:value-of select="@name"/><axsl:text/> expected only on interfaces.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@value)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@value)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used with arguments on <axsl:text/><axsl:value-of select="concat(local-name(parent::ExtendedAttributeList/parent::*),' ',parent::ExtendedAttributeList/parent::*/@name)"/><axsl:text/>.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(parent::ExtendedAttributeList/parent::Interface) or not(parent::ExtendedAttributeList/parent::Interface[Operation[(@setter or @creator or @deleter) and ArgumentList/Argument[1]/Type/@type='DOMString']])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(parent::ExtendedAttributeList/parent::Interface) or not(parent::ExtendedAttributeList/parent::Interface[Operation[(@setter or @creator or @deleter) and ArgumentList/Argument[1]/Type/@type='DOMString']])"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute Global used on interface <axsl:text/><axsl:value-of select="parent::ExtendedAttributeList/parent::Interface/@name"/><axsl:text/> that defines a named property setter, creator or deleter.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(parent::ExtendedAttributeList/parent::Interface) or not(parent::ExtendedAttributeList/ExtendedAttribute[@name='OverrideBuiltins'])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(parent::ExtendedAttributeList/parent::Interface) or not(parent::ExtendedAttributeList/ExtendedAttribute[@name='OverrideBuiltins'])"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute Global used on interface <axsl:text/><axsl:value-of select="parent::ExtendedAttributeList/parent::Interface/@name"/><axsl:text/> that is also declared with OverrideBuilins.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(parent::ExtendedAttributeList/parent::Interface) or not(ancestor::Interface[InterfaceInheritance] and //Interface[@name=current()/ancestor::Interface/InterfaceInheritance/Name/@name] and //Interface[@name=current()/ancestor::Interface/InterfaceInheritance/Name/@name]/ExtendedAttributeList/ExtendedAttribute[@name='OverrideBuiltins'])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(parent::ExtendedAttributeList/parent::Interface) or not(ancestor::Interface[InterfaceInheritance] and //Interface[@name=current()/ancestor::Interface/InterfaceInheritance/Name/@name] and //Interface[@name=current()/ancestor::Interface/InterfaceInheritance/Name/@name]/ExtendedAttributeList/ExtendedAttribute[@name='OverrideBuiltins'])"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute Global used on interface <axsl:text/><axsl:value-of select="parent::ExtendedAttributeList/parent::Interface/@name"/><axsl:text/> that inherits from another interface with the OverrideBuiltins extended attribute.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(parent::ExtendedAttributeList/parent::Interface) or not(//Interface[InterfaceInheritance/Name/@name=current()/parent::ExtendedAttributeList/parent::Interface/@name])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(parent::ExtendedAttributeList/parent::Interface) or not(//Interface[InterfaceInheritance/Name/@name=current()/parent::ExtendedAttributeList/parent::Interface/@name])"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Interface <axsl:text/><axsl:value-of select="//Interface[InterfaceInheritance/Name/@name=current()/parent::ExtendedAttributeList/parent::Interface/@name]/@name"/><axsl:text/> inherits from interface <axsl:text/><axsl:value-of select="parent::ExtendedAttributeList/parent::Interface/@name"/><axsl:text/> that is declared with the Global extended attribute.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M26"/></axsl:template><axsl:template match="text()" priority="-1" mode="M26"/><axsl:template match="@*|node()" priority="-2" mode="M26"><axsl:apply-templates select="@*|*" mode="M26"/></axsl:template>

<!--PATTERN Extended attribute EnsureUTF16-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Extended attribute EnsureUTF16</svrl:text>

	<!--RULE -->
<axsl:template match="//ExtendedAttribute[@name='EnsureUTF16']" priority="1000" mode="M27"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//ExtendedAttribute[@name='EnsureUTF16']"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@value)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@value)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used with arguments on <axsl:text/><axsl:value-of select="concat(local-name(parent::ExtendedAttributeList/parent::*),' ',parent::ExtendedAttributeList/parent::*/@name)"/><axsl:text/>.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="parent::ExtendedAttributeList/parent::Attribute or parent::ExtendedAttributeList/parent::Argument"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="parent::ExtendedAttributeList/parent::Attribute or parent::ExtendedAttributeList/parent::Argument"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute EnsureUTF16 used on <axsl:text/><axsl:value-of select="concat(local-name(parent::ExtendedAttributeList/parent::*), ' ', parent::ExtendedAttributeList/parent::*/@name)"/><axsl:text/> — EnsureUTF16 can only be used on attributes or operation arguments.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(parent::ExtendedAttributeList/parent::Attribute or parent::ExtendedAttributeList/parent::Argument) or parent::ExtendedAttributeList/parent::*/Type/@type = 'DOMString'"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(parent::ExtendedAttributeList/parent::Attribute or parent::ExtendedAttributeList/parent::Argument) or parent::ExtendedAttributeList/parent::*/Type/@type = 'DOMString'"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute EnsureUTF16 used on <axsl:text/><axsl:value-of select="concat(local-name(parent::ExtendedAttributeList/parent::*), ' ', parent::ExtendedAttributeList/parent::*/@name)"/><axsl:text/> of type <axsl:text/><axsl:value-of select="concat(parent::ExtendedAttributeList/parent::*/Type/@type,parent::ExtendedAttributeList/parent::*/Type/@name)"/><axsl:text/> — EnsureUTF16 can only be used on attributes or operation arguments of type DOMString.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(parent::ExtendedAttributeList/parent::Attribute) or not(parent::ExtendedAttributeList/parent::Attribute/@readonly)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(parent::ExtendedAttributeList/parent::Attribute) or not(parent::ExtendedAttributeList/parent::Attribute/@readonly)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute EnsureUTF16 used on readonly attribute <axsl:text/><axsl:value-of select="parent::ExtendedAttributeList/parent::Attribute/@name"/><axsl:text/> — EnsureUTF16 can only be used on attributes that are writable.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M27"/></axsl:template><axsl:template match="text()" priority="-1" mode="M27"/><axsl:template match="@*|node()" priority="-2" mode="M27"><axsl:apply-templates select="@*|*" mode="M27"/></axsl:template>

<!--PATTERN Extended Attribute SameObject-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Extended Attribute SameObject</svrl:text>

	<!--RULE -->
<axsl:template match="//ExtendedAttribute[@name='SameObject']" priority="1000" mode="M28"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//ExtendedAttribute[@name='SameObject']"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="parent::ExtendedAttributeList/parent::Attribute"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="parent::ExtendedAttributeList/parent::Attribute"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used on <axsl:text/><axsl:value-of select="local-name(parent::ExtendedAttributeList/parent::*)"/><axsl:text/> — <axsl:text/><axsl:value-of select="@name"/><axsl:text/> expected only on attributes.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(parent::ExtendedAttributeList/parent::Attribute) or parent::ExtendedAttributeList/parent::Attribute[@readonly='readonly']"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(parent::ExtendedAttributeList/parent::Attribute) or parent::ExtendedAttributeList/parent::Attribute[@readonly='readonly']"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used on non-readonly attribute <axsl:text/><axsl:value-of select="ancestor::Interface/@name"/><axsl:text/>.<axsl:text/><axsl:value-of select="parent::ExtendedAttributeList/parent::Attribute/@name"/><axsl:text/> — <axsl:text/><axsl:value-of select="@name"/><axsl:text/> expected only on readonly attributes.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@value)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@value)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used with arguments on <axsl:text/><axsl:value-of select="concat(local-name(parent::ExtendedAttributeList/parent::*),' ',parent::ExtendedAttributeList/parent::*/@name)"/><axsl:text/>.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(parent::ExtendedAttributeList/parent::Attribute/Type) or parent::ExtendedAttributeList/parent::Attribute/Type/@name or parent::ExtendedAttributeList/parent::Attribute/Type/@type='Promise'"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(parent::ExtendedAttributeList/parent::Attribute/Type) or parent::ExtendedAttributeList/parent::Attribute/Type/@name or parent::ExtendedAttributeList/parent::Attribute/Type/@type='Promise'"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute SameObject used on an attribute whose type (<axsl:text/><axsl:value-of select="parent::ExtendedAttributeList/parent::Attribute/Type/@type"/><axsl:text/>) is not an interface type or a promise.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M28"/></axsl:template><axsl:template match="text()" priority="-1" mode="M28"/><axsl:template match="@*|node()" priority="-2" mode="M28"><axsl:apply-templates select="@*|*" mode="M28"/></axsl:template>

<!--PATTERN Extended Attribute PutForwards-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Extended Attribute PutForwards</svrl:text>

	<!--RULE -->
<axsl:template match="//ExtendedAttribute[@name='PutForwards']" priority="1000" mode="M29"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//ExtendedAttribute[@name='PutForwards']"/><axsl:variable name="validObject" select="parent::ExtendedAttributeList/parent::Attribute"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="parent::ExtendedAttributeList/parent::Attribute"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="parent::ExtendedAttributeList/parent::Attribute"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used on <axsl:text/><axsl:value-of select="local-name(parent::ExtendedAttributeList/parent::*)"/><axsl:text/> — <axsl:text/><axsl:value-of select="@name"/><axsl:text/> expected only on attributes.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(parent::ExtendedAttributeList/parent::Attribute) or parent::ExtendedAttributeList/parent::Attribute[@readonly='readonly']"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(parent::ExtendedAttributeList/parent::Attribute) or parent::ExtendedAttributeList/parent::Attribute[@readonly='readonly']"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used on non-readonly attribute <axsl:text/><axsl:value-of select="ancestor::Interface/@name"/><axsl:text/>.<axsl:text/><axsl:value-of select="parent::ExtendedAttributeList/parent::Attribute/@name"/><axsl:text/> — <axsl:text/><axsl:value-of select="@name"/><axsl:text/> expected only on readonly attributes.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="@value"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="@value"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used without required argument on <axsl:text/><axsl:value-of select="ancestor::Interface/@name"/><axsl:text/>.<axsl:text/><axsl:value-of select="parent::ExtendedAttributeList/parent::Attribute/@name"/><axsl:text/>.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:variable name="linkedInterface" select="parent::ExtendedAttributeList/parent::Attribute/Type/@name"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@value and $validObject) or //Interface[@name=$linkedInterface]/Attribute[@name=current()/@value] or $standards//Interface[@name=$linkedInterface]/Attribute[@name=current()/@value]"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@value and $validObject) or //Interface[@name=$linkedInterface]/Attribute[@name=current()/@value] or $standards//Interface[@name=$linkedInterface]/Attribute[@name=current()/@value]"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute PutForwards used on attribute <axsl:text/><axsl:value-of select="ancestor::Interface/@name"/><axsl:text/>.<axsl:text/><axsl:value-of select="parent::ExtendedAttributeList/parent::Attribute/@name"/><axsl:text/> with argument <axsl:text/><axsl:value-of select="@value"/><axsl:text/> does not match a known attribute in <axsl:text/><axsl:value-of select="$linkedInterface"/><axsl:text/> interface.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M29"/></axsl:template><axsl:template match="text()" priority="-1" mode="M29"/><axsl:template match="@*|node()" priority="-2" mode="M29"><axsl:apply-templates select="@*|*" mode="M29"/></axsl:template>

<!--PATTERN Extended Attribute Replaceable-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Extended Attribute Replaceable</svrl:text>

	<!--RULE -->
<axsl:template match="//ExtendedAttribute[@name='Replaceable']" priority="1000" mode="M30"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//ExtendedAttribute[@name='Replaceable']"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@value)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@value)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used with arguments on <axsl:text/><axsl:value-of select="concat(local-name(parent::ExtendedAttributeList/parent::*),' ',parent::ExtendedAttributeList/parent::*/@name)"/><axsl:text/>.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="parent::ExtendedAttributeList/parent::Attribute"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="parent::ExtendedAttributeList/parent::Attribute"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used on <axsl:text/><axsl:value-of select="local-name(parent::ExtendedAttributeList/parent::*)"/><axsl:text/> — <axsl:text/><axsl:value-of select="@name"/><axsl:text/> expected only on attributes.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(parent::ExtendedAttributeList/parent::Attribute) or parent::ExtendedAttributeList/parent::Attribute[@readonly='readonly']"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(parent::ExtendedAttributeList/parent::Attribute) or parent::ExtendedAttributeList/parent::Attribute[@readonly='readonly']"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used on non-readonly attribute <axsl:text/><axsl:value-of select="ancestor::Interface/@name"/><axsl:text/>.<axsl:text/><axsl:value-of select="parent::ExtendedAttributeList/parent::Attribute/@name"/><axsl:text/> — <axsl:text/><axsl:value-of select="@name"/><axsl:text/> expected only on readonly attributes.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M30"/></axsl:template><axsl:template match="text()" priority="-1" mode="M30"/><axsl:template match="@*|node()" priority="-2" mode="M30"><axsl:apply-templates select="@*|*" mode="M30"/></axsl:template>

<!--PATTERN Extended Attribute TreatNullAs-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Extended Attribute TreatNullAs</svrl:text>

	<!--RULE -->
<axsl:template match="//ExtendedAttribute[@name='TreatNullAs']" priority="1000" mode="M31"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//ExtendedAttribute[@name='TreatNullAs']"/><axsl:variable name="validObject" select="parent::ExtendedAttributeList/parent::Attribute or parent::ExtendedAttributeList/parent::Argument/parent::ArgumentList/parent::Operation or parent::ExtendedAttributeList/parent::Operation"/><axsl:variable name="objectName" select="concat(ancestor::Interface/@name,'.',concat(parent::ExtendedAttributeList/parent::Attribute/@name, parent::ExtendedAttributeList/parent::Argument/parent::ArgumentList/parent::Operation/@name, parent::ExtendedAttributeList/parent::Operation/@name))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="$validObject"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="$validObject"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used on <axsl:text/><axsl:value-of select="local-name(parent::ExtendedAttributeList/parent::*)"/><axsl:text/> — <axsl:text/><axsl:value-of select="@name"/><axsl:text/> expected only on attribute, operation arguments, or operations.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not($validObject) or parent::ExtendedAttributeList/parent::*/Type[@type='DOMString' and not(@nullable)]"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not($validObject) or parent::ExtendedAttributeList/parent::*/Type[@type='DOMString' and not(@nullable)]"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute TreatNullAs used on <axsl:text/><axsl:value-of select="$objectName"/><axsl:text/> applied to type <axsl:text/><axsl:value-of select="concat(parent::ExtendedAttributeList/parent::*/Type/@type, parent::ExtendedAttributeList/parent::*/Type/@name)"/><axsl:text/> — TreatNullAs expected only on attributes, operations or operations arguments with non-nullable DOMString type.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not($validObject) or @value='EmptyString'"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not($validObject) or @value='EmptyString'"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute TreatNullAs used on <axsl:text/><axsl:value-of select="$objectName"/><axsl:text/> without required “EmptyString” argument.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M31"/></axsl:template><axsl:template match="text()" priority="-1" mode="M31"/><axsl:template match="@*|node()" priority="-2" mode="M31"><axsl:apply-templates select="@*|*" mode="M31"/></axsl:template>

<!--PATTERN Extended Attribute TreatUndefinedAs-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Extended Attribute TreatUndefinedAs</svrl:text>

	<!--RULE -->
<axsl:template match="//ExtendedAttribute[@name='TreatUndefinedAs']" priority="1000" mode="M32"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//ExtendedAttribute[@name='TreatUndefinedAs']"/><axsl:variable name="validObject" select="parent::ExtendedAttributeList/parent::Attribute or parent::ExtendedAttributeList/parent::Argument/parent::ArgumentList/parent::Operation or parent::ExtendedAttributeList/parent::Operation"/><axsl:variable name="objectName" select="concat(ancestor::Interface/@name,'.',concat(parent::ExtendedAttributeList/parent::Attribute/@name, parent::ExtendedAttributeList/parent::Argument/parent::ArgumentList/parent::Operation/@name, parent::ExtendedAttributeList/parent::Operation/@name))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="$validObject"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="$validObject"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used on <axsl:text/><axsl:value-of select="local-name(parent::ExtendedAttributeList/parent::*)"/><axsl:text/> — <axsl:text/><axsl:value-of select="@name"/><axsl:text/> expected only on attribute, operation arguments, or operations.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not($validObject) or parent::ExtendedAttributeList/parent::*/Type[@type='DOMString']"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not($validObject) or parent::ExtendedAttributeList/parent::*/Type[@type='DOMString']"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute TreatUndefinedAs used on <axsl:text/><axsl:value-of select="$objectName"/><axsl:text/> applied to type <axsl:text/><axsl:value-of select="concat(parent::ExtendedAttributeList/parent::*/Type/@type, parent::ExtendedAttributeList/parent::*/Type/@name)"/><axsl:text/> — TreatUndefinedAs expected only on attributes, operations or operations arguments with DOMString or DOMString? type.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not($validObject) or (@value='EmptyString' or @value='Null')"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not($validObject) or (@value='EmptyString' or @value='Null')"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute TreatUndefinedAs used on <axsl:text/><axsl:value-of select="$objectName"/><axsl:text/> without required “EmptyString” or “Null” argument.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not($validObject and parent::ExtendedAttributeList/parent::*/Type[@type='DOMString']) or not(@value='Null') or  (@value='Null' and parent::ExtendedAttributeList/parent::*/Type[@nullable='nullable'])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not($validObject and parent::ExtendedAttributeList/parent::*/Type[@type='DOMString']) or not(@value='Null') or (@value='Null' and parent::ExtendedAttributeList/parent::*/Type[@nullable='nullable'])"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute TreatUndefinedAs used on <axsl:text/><axsl:value-of select="$objectName"/><axsl:text/> with required “Null” argument, but not applied to a DOMString? object.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M32"/></axsl:template><axsl:template match="text()" priority="-1" mode="M32"/><axsl:template match="@*|node()" priority="-2" mode="M32"><axsl:apply-templates select="@*|*" mode="M32"/></axsl:template>

<!--PATTERN Extended Attribute Clamp-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Extended Attribute Clamp</svrl:text>

	<!--RULE -->
<axsl:template match="//ExtendedAttribute[@name='Clamp']" priority="1000" mode="M33"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//ExtendedAttribute[@name='Clamp']"/><axsl:variable name="validObject" select="parent::ExtendedAttributeList/parent::Attribute or parent::ExtendedAttributeList/parent::Argument/parent::ArgumentList/parent::Operation or parent::ExtendedAttributeList/parent::DictionaryMember"/><axsl:variable name="objectName" select="concat(ancestor::*[local-name()='Interface' or local-name()='Dictionary'][1]/@name,'.',concat(parent::ExtendedAttributeList/parent::Attribute/@name, parent::ExtendedAttributeList/parent::Argument/parent::ArgumentList/parent::Operation/@name, parent::ExtendedAttributeList/parent::Operation/@name, parent::ExtendedAttributeList/parent::DictionaryMember/@name))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@value)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@value)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used with arguments on <axsl:text/><axsl:value-of select="concat(local-name(parent::ExtendedAttributeList/parent::*),' ',parent::ExtendedAttributeList/parent::*/@name)"/><axsl:text/>.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="$validObject"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="$validObject"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used on <axsl:text/><axsl:value-of select="concat(local-name(parent::ExtendedAttributeList/parent::*), ' ', parent::ExtendedAttributeList/parent::*/@name)"/><axsl:text/> — <axsl:text/><axsl:value-of select="@name"/><axsl:text/> expected only on attribute, operation arguments, or dictionary members.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not($validObject and parent::ExtendedAttributeList/parent::Attribute) or (parent::ExtendedAttributeList/parent::Attribute[not(@readonly)])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not($validObject and parent::ExtendedAttributeList/parent::Attribute) or (parent::ExtendedAttributeList/parent::Attribute[not(@readonly)])"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute Clamp used on non-writable attribute <axsl:text/><axsl:value-of select="$objectName"/><axsl:text/></svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not($validObject) or (parent::ExtendedAttributeList/parent::*/Type[@type='byte' or @type='octet' or @type='short' or @type='unsigned short' or @type='long' or @type='unsigned long' or @type='long long' or @type='unsigned long long'])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not($validObject) or (parent::ExtendedAttributeList/parent::*/Type[@type='byte' or @type='octet' or @type='short' or @type='unsigned short' or @type='long' or @type='unsigned long' or @type='long long' or @type='unsigned long long'])"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute Clamp used on non-integer <axsl:text/><axsl:value-of select="local-name(parent::ExtendedAttributeList/parent::*)"/><axsl:text/> <axsl:text/><axsl:value-of select="$objectName"/><axsl:text/></svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M33"/></axsl:template><axsl:template match="text()" priority="-1" mode="M33"/><axsl:template match="@*|node()" priority="-2" mode="M33"><axsl:apply-templates select="@*|*" mode="M33"/></axsl:template>

<!--PATTERN Extended attribute Unforgeable-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Extended attribute Unforgeable</svrl:text>

	<!--RULE -->
<axsl:template match="//ExtendedAttribute[@name='Unforgeable']" priority="1000" mode="M34"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//ExtendedAttribute[@name='Unforgeable']"/><axsl:variable name="validObject" select="parent::ExtendedAttributeList/parent::Attribute"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="parent::ExtendedAttributeList/parent::Attribute"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="parent::ExtendedAttributeList/parent::Attribute"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used on <axsl:text/><axsl:value-of select="local-name(parent::ExtendedAttributeList/parent::*)"/><axsl:text/> — <axsl:text/><axsl:value-of select="@name"/><axsl:text/> expected only on attributes.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@value)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@value)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used with arguments on <axsl:text/><axsl:value-of select="concat(local-name(parent::ExtendedAttributeList/parent::*),' ',parent::ExtendedAttributeList/parent::*/@name)"/><axsl:text/>.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not($validObject) or parent::ExtendedAttributeList/parent::Attribute/@readonly"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not($validObject) or parent::ExtendedAttributeList/parent::Attribute/@readonly"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute Unforgeable used on non-readonly attribute <axsl:text/><axsl:value-of select="concat(parent::ExtendedAttributeList/parent::Attribute/parent::Interface/@name, '.', parent::ExtendedAttributeList/parent::Attribute/@name)"/><axsl:text/></svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M34"/></axsl:template><axsl:template match="text()" priority="-1" mode="M34"/><axsl:template match="@*|node()" priority="-2" mode="M34"><axsl:apply-templates select="@*|*" mode="M34"/></axsl:template>

<!--PATTERN Extended attribute TreatNonCallableAsNull-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Extended attribute TreatNonCallableAsNull</svrl:text>

	<!--RULE -->
<axsl:template match="//ExtendedAttribute[@name='TreatNonCallableAsNull']" priority="1000" mode="M35"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//ExtendedAttribute[@name='TreatNonCallableAsNull']"/>

		<!--ASSERT warning-->
<axsl:choose><axsl:when test="false"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="false"><axsl:attribute name="role">warning</axsl:attribute><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute TreatNonCallableAsNull used on <axsl:text/><axsl:value-of select="concat(local-name(parent::ExtendedAttributeList/parent::*), ' ', parent::ExtendedAttributeList/parent::*/@name)"/><axsl:text/> ; specifications SHOULD NOT use [TreatNonCallableAsNull] unless required to specify the behavior of legacy APIs.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="parent::ExtendedAttributeList/parent::Attribute or parent::ExtendedAttributeList/parent::Argument"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="parent::ExtendedAttributeList/parent::Attribute or parent::ExtendedAttributeList/parent::Argument"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute TreatNonCallableAsNull used on <axsl:text/><axsl:value-of select="concat(local-name(parent::ExtendedAttributeList/parent::*), ' ', parent::ExtendedAttributeList/parent::*/@name)"/><axsl:text/> can only be used on attributes or operation arguments</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(parent::ExtendedAttributeList/parent::Attribute or parent::ExtendedAttributeList/parent::Argument) or (parent::ExtendedAttributeList/parent::*/Type/@nullable='nullable' and (parent::ExtendedAttributeList/parent::*/Type/@name = 'Function' or //Interface[@name = current()/parent::ExtendedAttributeList/parent::*/Type/@name]/@callback='callback'))"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(parent::ExtendedAttributeList/parent::Attribute or parent::ExtendedAttributeList/parent::Argument) or (parent::ExtendedAttributeList/parent::*/Type/@nullable='nullable' and (parent::ExtendedAttributeList/parent::*/Type/@name = 'Function' or //Interface[@name = current()/parent::ExtendedAttributeList/parent::*/Type/@name]/@callback='callback'))"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute TreatNonCallableAsNull used on <axsl:text/><axsl:value-of select="concat(local-name(parent::ExtendedAttributeList/parent::*), ' ', parent::ExtendedAttributeList/ancestor::Interface/@name, '.', parent::ExtendedAttributeList/ancestor::*[local-name()='Attribute' or local-name()='Operation']/@name)"/><axsl:text/> can only be used on an attribute or operation argument whose type is a nullable callback interface.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M35"/></axsl:template><axsl:template match="text()" priority="-1" mode="M35"/><axsl:template match="@*|node()" priority="-2" mode="M35"><axsl:apply-templates select="@*|*" mode="M35"/></axsl:template>

<!--PATTERN Extended attribute LegacyArrayClass-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Extended attribute LegacyArrayClass</svrl:text>

	<!--RULE -->
<axsl:template match="//ExtendedAttribute[@name='LegacyArrayClass']" priority="1000" mode="M36"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//ExtendedAttribute[@name='LegacyArrayClass']"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@value)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@value)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used with arguments on <axsl:text/><axsl:value-of select="concat(local-name(parent::ExtendedAttributeList/parent::*),' ',parent::ExtendedAttributeList/parent::*/@name)"/><axsl:text/>.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="parent::ExtendedAttributeList/parent::Interface"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="parent::ExtendedAttributeList/parent::Interface"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used on <axsl:text/><axsl:value-of select="local-name(parent::ExtendedAttributeList/parent::*)"/><axsl:text/> — <axsl:text/><axsl:value-of select="@name"/><axsl:text/> expected only on interfaces.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(parent::ExtendedAttributeList/parent::Interface/InterfaceInheritance)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(parent::ExtendedAttributeList/parent::Interface/InterfaceInheritance)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>The interface <axsl:text/><axsl:value-of select="parent::ExtendedAttributeList/parent::Interface/@name"/><axsl:text/> has extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> but inherits from another interface (<axsl:text/><axsl:value-of select="parent::ExtendedAttributeList/parent::Interface/InterfaceInheritance/Name/@name"/><axsl:text/>).</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M36"/></axsl:template><axsl:template match="text()" priority="-1" mode="M36"/><axsl:template match="@*|node()" priority="-2" mode="M36"><axsl:apply-templates select="@*|*" mode="M36"/></axsl:template>

<!--PATTERN Extended attribute EnforceRange-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Extended attribute EnforceRange</svrl:text>

	<!--RULE -->
<axsl:template match="//ExtendedAttribute[@name='EnforceRange']" priority="1000" mode="M37"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//ExtendedAttribute[@name='EnforceRange']"/><axsl:variable name="validObject" select="parent::ExtendedAttributeList/parent::Attribute or parent::ExtendedAttributeList/parent::Argument/parent::ArgumentList/parent::Operation or parent::ExtendedAttributeList/parent::DictionaryMember"/><axsl:variable name="objectName" select="concat(ancestor::*[local-name()='Interface' or local-name()='Dictionary'][1]/@name,'.',concat(parent::ExtendedAttributeList/parent::Attribute/@name, parent::ExtendedAttributeList/parent::Argument/parent::ArgumentList/parent::Operation/@name, parent::ExtendedAttributeList/parent::Operation/@name, parent::ExtendedAttributeList/parent::DictionaryMember/@name))"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@value)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@value)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used with arguments on <axsl:text/><axsl:value-of select="concat(local-name(parent::ExtendedAttributeList/parent::*),' ',parent::ExtendedAttributeList/parent::*/@name)"/><axsl:text/>.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="$validObject"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="$validObject"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used on <axsl:text/><axsl:value-of select="concat(local-name(parent::ExtendedAttributeList/parent::*), ' ', parent::ExtendedAttributeList/parent::*/@name)"/><axsl:text/> — <axsl:text/><axsl:value-of select="@name"/><axsl:text/> expected only on attribute, operation arguments, or dictionary members.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not($validObject and parent::ExtendedAttributeList/parent::Attribute) or (parent::ExtendedAttributeList/parent::Attribute[not(@readonly)])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not($validObject and parent::ExtendedAttributeList/parent::Attribute) or (parent::ExtendedAttributeList/parent::Attribute[not(@readonly)])"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute EnforceRange used on non-writable attribute <axsl:text/><axsl:value-of select="$objectName"/><axsl:text/></svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not($validObject) or (parent::ExtendedAttributeList/parent::*/Type[@type='byte' or @type='octet' or @type='short' or @type='unsigned short' or @type='long' or @type='unsigned long' or @type='long long' or @type='unsigned long long'])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not($validObject) or (parent::ExtendedAttributeList/parent::*/Type[@type='byte' or @type='octet' or @type='short' or @type='unsigned short' or @type='long' or @type='unsigned long' or @type='long long' or @type='unsigned long long'])"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute EnforceRange used on non-integer <axsl:text/><axsl:value-of select="local-name(parent::ExtendedAttributeList/parent::*)"/><axsl:text/> <axsl:text/><axsl:value-of select="$objectName"/><axsl:text/></svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not($validObject) or not(parent::ExtendedAttributeList/ExtendedAttribute[@name='Clamp'])"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not($validObject) or not(parent::ExtendedAttributeList/ExtendedAttribute[@name='Clamp'])"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute EnforceRange used in conjunction with Clamp on <axsl:text/><axsl:value-of select="local-name(parent::ExtendedAttributeList/parent::*)"/><axsl:text/> <axsl:text/><axsl:value-of select="$objectName"/><axsl:text/></svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M37"/></axsl:template><axsl:template match="text()" priority="-1" mode="M37"/><axsl:template match="@*|node()" priority="-2" mode="M37"><axsl:apply-templates select="@*|*" mode="M37"/></axsl:template>

<!--PATTERN Extended attribute ImplicitThis-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Extended attribute ImplicitThis</svrl:text>

	<!--RULE -->
<axsl:template match="//ExtendedAttribute[@name='ImplicitThis']" priority="1000" mode="M38"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//ExtendedAttribute[@name='ImplicitThis']"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@value)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@value)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used with arguments on <axsl:text/><axsl:value-of select="concat(local-name(parent::ExtendedAttributeList/parent::*),' ',parent::ExtendedAttributeList/parent::*/@name)"/><axsl:text/>.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="parent::ExtendedAttributeList/parent::Interface"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="parent::ExtendedAttributeList/parent::Interface"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used on <axsl:text/><axsl:value-of select="local-name(parent::ExtendedAttributeList/parent::*)"/><axsl:text/> — <axsl:text/><axsl:value-of select="@name"/><axsl:text/> expected only on interfaces.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M38"/></axsl:template><axsl:template match="text()" priority="-1" mode="M38"/><axsl:template match="@*|node()" priority="-2" mode="M38"><axsl:apply-templates select="@*|*" mode="M38"/></axsl:template>

<!--PATTERN Extended attribute LenientThis-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Extended attribute LenientThis</svrl:text>

	<!--RULE -->
<axsl:template match="//ExtendedAttribute[@name='LenientThis']" priority="1000" mode="M39"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//ExtendedAttribute[@name='LenientThis']"/>

		<!--ASSERT -->
<axsl:choose><axsl:when test="not(@value)"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="not(@value)"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used with arguments on <axsl:text/><axsl:value-of select="concat(local-name(parent::ExtendedAttributeList/parent::*),' ',parent::ExtendedAttributeList/parent::*/@name)"/><axsl:text/>.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT -->
<axsl:choose><axsl:when test="parent::ExtendedAttributeList/parent::Attribute"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="parent::ExtendedAttributeList/parent::Attribute"><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute <axsl:text/><axsl:value-of select="@name"/><axsl:text/> used on <axsl:text/><axsl:value-of select="local-name(parent::ExtendedAttributeList/parent::*)"/><axsl:text/> — <axsl:text/><axsl:value-of select="@name"/><axsl:text/> expected only on attributes.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose>

		<!--ASSERT warning-->
<axsl:choose><axsl:when test="false"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="false"><axsl:attribute name="role">warning</axsl:attribute><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Extended attribute LenientThis used on <axsl:text/><axsl:value-of select="concat(local-name(parent::ExtendedAttributeList/parent::*), ' ', parent::ExtendedAttributeList/parent::*/@name)"/><axsl:text/> ; specifications SHOULD NOT use [LenientThis] unless required for compatibility reasons.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M39"/></axsl:template><axsl:template match="text()" priority="-1" mode="M39"/><axsl:template match="@*|node()" priority="-2" mode="M39"><axsl:apply-templates select="@*|*" mode="M39"/></axsl:template>

<!--PATTERN Constants-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Constants</svrl:text>

	<!--RULE -->
<axsl:template match="//Const" priority="1000" mode="M40"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//Const"/>

		<!--ASSERT warning-->
<axsl:choose><axsl:when test="Type[@type='unsigned short']"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="Type[@type='unsigned short']"><axsl:attribute name="role">warning</axsl:attribute><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text>Numeric constant used <axsl:text/><axsl:value-of select="@name"/><axsl:text/> in <axsl:text/><axsl:value-of select="concat(local-name(parent::*), ' ', parent::*/@name)"/><axsl:text/>; the Web platform is moving away from using named integer codes in the style of an enumeration, in favor of the use of strings.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M40"/></axsl:template><axsl:template match="text()" priority="-1" mode="M40"/><axsl:template match="@*|node()" priority="-2" mode="M40"><axsl:apply-templates select="@*|*" mode="M40"/></axsl:template>

<!--PATTERN Warn against use of float instead of double-->
<svrl:text xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron">Warn against use of float instead of double</svrl:text>

	<!--RULE -->
<axsl:template match="//Type[@type='float']" priority="1000" mode="M41"><svrl:fired-rule xmlns:svrl="http://purl.oclc.org/dsdl/svrl" context="//Type[@type='float']"/>

		<!--ASSERT warning-->
<axsl:choose><axsl:when test="true"/><axsl:otherwise><svrl:failed-assert xmlns:svrl="http://purl.oclc.org/dsdl/svrl" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:schold="http://www.ascc.net/xml/schematron" test="true"><axsl:attribute name="role">warning</axsl:attribute><axsl:attribute name="location"><axsl:apply-templates select="." mode="schematron-get-full-path"/></axsl:attribute><svrl:text><axsl:text/><axsl:value-of select="concat(local-name(parent::*), ' ', parent::*/@name)"/><axsl:text/> uses type "float"; unless there are specific reasons to use a 32 bit floating point type, specifications SHOULD use double rather than float.</svrl:text></svrl:failed-assert></axsl:otherwise></axsl:choose><axsl:apply-templates select="@*|*" mode="M41"/></axsl:template><axsl:template match="text()" priority="-1" mode="M41"/><axsl:template match="@*|node()" priority="-2" mode="M41"><axsl:apply-templates select="@*|*" mode="M41"/></axsl:template></axsl:stylesheet>
